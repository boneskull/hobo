{"version":3,"sources":["../../../src/commands/setup/questions.js"],"names":[],"mappings":"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","file":"questions.js","sourcesContent":["'use strict';\n\nimport path from 'path';\nimport fs, {canWrite, isDirEmpty} from '../../fs';\nimport logger from '../../logger';\nimport chalk from 'chalk';\nimport _parseGitConfig from 'parse-git-config';\nimport _githubUsername from 'github-username';\nimport {pkgNamePlural} from '../../meta';\nimport Promise from 'bluebird';\nimport _ from '../../utils';\nimport Hobo, {hoboDirpath} from '../../hobo';\nimport url from 'url';\n\nconst parseGitConfig = Promise.promisify(_parseGitConfig);\nconst githubUsername = Promise.promisify(_githubUsername);\nconst tokenUrl = 'https://github.com/settings/tokens/new';\nconst defaultBindleName = 'default';\nconst bindleExt = 'bindle';\nconst log = logger();\n\nfunction questions() {\n  return Hobo()\n    .then(function(hobo) {\n      return hobo.get('gitHubToken')\n        .then(function(hoboGitHubToken) {\n          const hasGitHub = {\n            type: 'confirm',\n            name: 'hasGitHub',\n            message: `Do you have a GitHub account?`,\n            when: () => hoboGitHubToken\n          };\n\n          const gitHubToken = {\n            type: 'password',\n            name: 'gitHubToken',\n            message: `Copy & paste it here:`,\n            'default': () => {\n              console.log(`Thanks.  Next, we'll need a personal access token.\\n` +\n                `Visit ${chalk.blue(tokenUrl)} and create a token with ` +\n                `${chalk.blue('repo_public')} access.`);\n            },\n            when: (answers) => !hoboGitHubToken && answers.hasGitHub,\n            validate(answer) {\n              return true || /^[a-z0-9]{40}$/.test(answer) ||\n                chalk.yellow(`This doesn't appear to be a GitHub token.  It ` +\n                  `should be 40 alphanumeric characters.`);\n            }\n          };\n\n          const bindleName = {\n            'default': () => {\n              console.log(\"Now we will create a configuration for you.  This is \" +\n                `called a ${chalk.blue('Bindle')}.`);\n              return defaultBindleName;\n            },\n            message: 'What should it be named?',\n            type: 'input',\n            when: (answers) => answers.hasGitHub,\n            validate(answer) {\n              const result = /^[a-zA-Z0-9_.-]+$/.test(answer) ||\n                'All characters must be ' +\n                'alphanumeric or one of \"_\", \".\", or \"-\"';\n              if (result === true) {\n                const done = this.async();\n                const newBindlePath = path.join(hoboDirpath, 'bindles', answer);\n                fs.statAsync(newBindlePath)\n                  .then(function(stat) {\n                    if (stat.isDirectory()) {\n                      return isDirEmpty(newBindlePath)\n                        .then(function(isEmpty) {\n                          if (isEmpty) {\n                            return result;\n                          }\n                          return `A bindle named \"${answer}\" already exists.`;\n                        });\n                    }\n                    return `A regular file exists at path ${newBindlePath}. ` +\n                      `Remove it before continuing.`;\n                  }, function() {\n                    return result;\n                  })\n                  .then(done, done);\n              }\n            },\n            name: 'bindleName'\n          };\n\n          const gitHubRepo = {\n            type: 'input',\n            name: 'repo',\n            'default': function guessUsername(answers) {\n              const done = this.async();\n              const repoName = answers.bindleName;\n\n              parseGitConfig({\n                path: path.join(fs.home, '.gitconfig')\n              })\n                .catch(() => {\n                  log.debug(`Couldn't parse .gitconfig`);\n                })\n                .get('user')\n                .then((user) => {\n                  const email = _.get(user, 'email');\n                  if (email) {\n                    return githubUsername(email)\n                      .catch(() => {\n                        log.debug(\"Couldn't determine the GitHub username from email \" +\n                          `\"${email}\"`);\n                      })\n                      .then(username => `${username}/${repoName}.${bindleExt}`);\n                  }\n                  log.debug(`Couldn't find an email address in .gitconfig`);\n                  return `<your-github-username>/${repoName}.${bindleExt}`;\n                })\n                .then((value) => {\n                  console.log('We need to create a repository to store your ' +\n                    `settings.`);\n                  return value;\n                })\n                .then(done);\n            },\n            message: `Where on GitHub should we put it?`,\n            when: (answers) => answers.hasGitHub,\n            filter: (answer) => url.resolve('https://github.com/', answer),\n            validate: (answer) => {\n              return /^\\w+\\/.+$/.test(answer) ||\n                chalk.yellow('The repo should be of the format ` + ' +\n                  `${chalk.bold('username/repo')}.`);\n            }\n          };\n\n          return [\n            hasGitHub,\n            gitHubToken,\n            gitHubRepo,\n            bindleName\n          ];\n        });\n    });\n}\n\nexport default questions;\n\n"]}