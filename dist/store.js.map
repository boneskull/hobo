{"version":3,"sources":["../src/store.js"],"names":[],"mappings":";;;;;;;;uBAEoB,SAAS;;;;yBACP,WAAW;;;;kBACZ,MAAM;;qBACT,SAAS;;;;qBACb,SAAS;;;;wBACH,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;AAP9B,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASb,IAAM,KAAK,GAAG,OAAO,CAAC;AACpB,MAAI,EAAE;AACJ,QAAI,EAAE,EAAE;GACT;AACD,MAAI,EAAA,gBAAG;;;AACL,QAAI,CAAC,IAAI,CAAC,EAAE,EAAE;AACZ,aAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;KACpD;AACD,QAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AACjB,aAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;KACzD;AACD,WAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CACxB,IAAI,CAAC,YAAM;AACV,YAAK,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC,MAAK,EAAE,EAAE;AAC9B,eAAO,EAAE,MAAK,OAAO;OACtB,CAAC,CAAC;AACH,aAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAK,IAAI,CAAC,EAAE,UAAC,GAAG,EAAK;AAC7C,eAAO,MAAK,KAAK,CAAC,GAAG,EAAE,MAAK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;OACxC,CAAC,CAAC;KACJ,CAAC,UACK,CAAC,IAAI,CAAC,CAAC;GACjB;AACD,SAAO,EAAE;AACP,OAAG,EAAE,SAAS,GAAG,GAAG;AAClB,aAAO,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;KAC9C;AACD,SAAK,EAAE,SAAS,KAAK,GAAG;AACtB,aAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;KAChD;GACF;CACF,CAAC,CACC,OAAO,CAAC,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;qBAEH,KAAK","file":"store.js","sourcesContent":["'use strict';\n\nimport stampit from 'stampit';\nimport trivialdb from 'trivialdb';\nimport {mkdirp} from './fs';\nimport Stamp from './stamp';\nimport _ from './utils';\nimport Promise from 'bluebird';\n\nconst Store = stampit({\n  refs: {\n    data: {}\n  },\n  init() {\n    if (!this.id) {\n      return Promise.reject(new Error('id is required'));\n    }\n    if (!this.dirpath) {\n      return Promise.reject(new Error('dirpath is required'));\n    }\n    return mkdirp(this.dirpath)\n      .then(() => {\n        this.db = trivialdb.db(this.id, {\n          dirpath: this.dirpath\n        });\n        return Promise.map(_.keys(this.data), (key) => {\n          return this.store(key, this.data[key]);\n        });\n      })\n      .return(this);\n  },\n  methods: {\n    get: function get() {\n      return this.db.get.apply(this.db, arguments);\n    },\n    store: function store() {\n      return this.db.store.apply(this.db, arguments);\n    }\n  }\n})\n  .compose(Stamp);\n\nexport default Store;\n\n"]}