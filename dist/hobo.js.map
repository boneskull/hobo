{"version":3,"sources":["../src/hobo.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;uBAEO,SAAS;;;;kBACF,MAAM;;oBAChB,MAAM;;;;sBACJ,UAAU;;;;qBACX,SAAS;;;;oBACP,QAAQ;;;;qBACd,SAAS;;;;wBACH,UAAU;;;;AAGvB,IAAM,WAAW,GAAG,kBAAK,IAAI,WAAO,OAAO,CAAC,CAAC;;AACpD,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;;AAEzB,IAAM,IAAI,GAAG,0BAAQ;AACnB,MAAI,EAAE;AACJ,UAAM,EAAE,EAAE;GACX;AACD,OAAK,EAAE;AACL,MAAE,mBAAS;AACX,WAAO,EAAE,WAAW;GACrB;AACD,MAAI,EAAA,gBAAG;AACL,WAAO,gBAAO,IAAI,CAAC,OAAO,CAAC,UAClB,CAAC,IAAI,CAAC,CAAC;GACjB;AACD,SAAO,EAAE;AACP,aAAS,EAAA,mBAAC,EAAE,EAAE,GAAG,EAAE;AACjB,UAAM,MAAM,GAAG,yBAAO;AACpB,UAAE,EAAE,EAAE;AACN,WAAG,EAAE,GAAG;OACT,CAAC,CAAC;AACH,UAAI,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;AAC1B,aAAO,MAAM,CAAC;KACf;AACD,OAAG,EAAE,eAAW;AACd,aAAO,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;KAC9C;AACD,OAAG,EAAE,eAAW;AACd,aAAO,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;KAC9C;GACF;CACF,CAAC,CACC,OAAO,oBAAO,CACd,IAAI,CAAC,YAAW;;;AACf,SAAO,sBAAQ,GAAG,CAAC,mBAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,UAAC,GAAG,EAAK;AAC/C,WAAO,MAAK,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,MAAK,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;GAC3C,CAAC,UACO,CAAC,IAAI,CAAC,CAAC;CACjB,CAAC,CAAC;;qBAEU,IAAI","file":"hobo.js","sourcesContent":["'use strict';\n\nimport stampit from 'stampit';\nimport {home, mkdirp} from './fs';\nimport path from 'path';\nimport Bindle from './bindle';\nimport Store from './store';\nimport pkgName from './meta';\nimport _ from './utils';\nimport Promise from 'bluebird';\n\n\nexport const hoboDirpath = path.join(home, '.hobo');\nconsole.log(hoboDirpath);\n\nconst Hobo = stampit({\n  refs: {\n    values: {}\n  },\n  props: {\n    id: pkgName,\n    dirpath: hoboDirpath\n  },\n  init() {\n    return mkdirp(this.dirpath)\n      .return(this);\n  },\n  methods: {\n    addBindle(id, url) {\n      const bindle = Bindle({\n        id: id,\n        url: url\n      });\n      this.bindles[id] = bindle;\n      return bindle;\n    },\n    get: function() {\n      return this.db.get.apply(this.db, arguments);\n    },\n    set: function() {\n      return this.db.set.apply(this.db, arguments);\n    }\n  }\n})\n  .compose(Store)\n  .init(function() {\n    return Promise.map(_.keys(this.values), (key) => {\n      return this.db.set(key, this.values[key]);\n    })\n      .return(this);\n  });\n\nexport default Hobo;\n"]}