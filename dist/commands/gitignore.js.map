{"version":3,"sources":["../../src/commands/gitignore.js"],"names":[],"mappings":"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","file":"gitignore.js","sourcesContent":["'use strict';\n\nlet gitignoreParser = require('gitignore-parser');\nlet fs = require('../fs');\nlet pkg = require('../../package.json');\nlet path = require('path');\nlet _ = require('../utils');\n\nconst GITIGNORE = '.gitignore';\nconst log = require('../logger')();\n\nfunction updateGitignore(cwd) {\n  cwd = cwd || fs.cwd;\n\n  return fs.isGit(cwd)\n    .then((result) => {\n      if (result) {\n        const symlinks = pkg.config['digs-dev'].symlink;\n        const gitignorePath = path.join(cwd, GITIGNORE);\n        return fs.readFileAsync(gitignorePath, 'utf-8')\n          .then(function getInfo(contents) {\n            const gitignore = gitignoreParser.compile(contents);\n            const newEntries = _.reject(symlinks, gitignore.denies);\n            if (newEntries.length) {\n              let beforeLen = 0;\n              let afterLen = 0;\n\n              contents = _(contents)\n                .split('\\n')\n                .tap(function getBeforeLines(lines) {\n                  beforeLen = lines.length;\n                })\n                .concat(newEntries)\n                .tap(function getAfterLines(lines) {\n                  afterLen = lines.length;\n                })\n                .join('\\n');\n\n              return {\n                contents: contents,\n                appended: afterLen - beforeLen\n              };\n            }\n            log.ok(`${gitignorePath} up-to-date; nothing to do`);\n          })\n          .error(function createGitignore() {\n            log.warn(`${gitignorePath} does not exist.  Creating...`);\n            return fs.readFileAsync(path.join(__dirname,\n                'templates',\n                'gitignore'),\n              'utf-8')\n              .then(function write(contents) {\n                return fs.writeFileAsync(gitignorePath, contents);\n              })\n              .then(function returnSymlinks() {\n                log.ok(`Created ${gitignorePath}`);\n                return {\n                  contents: symlinks.join('\\n'),\n                  appended: symlinks.length\n                };\n              });\n          })\n          .then(function write(obj) {\n            if (obj) {\n              return fs.writeFileAsync(gitignorePath, obj.contents)\n                .then(function report() {\n                  log.ok(`Appended ${obj.appended} entries to` +\n                    `${gitignorePath}`);\n                });\n            }\n          });\n      }\n      log.info(`${cwd} is not under version control; skipping.`);\n    });\n}\n\nmodule.exports = updateGitignore;\n"]}